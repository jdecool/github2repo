#!/usr/bin/env php
<?php

use Symfony\Component\Console\Output\OutputInterface;

require __DIR__.'/../vendor/autoload.php';

$app = new Silly\Application();

$app->command(
    'gen [--endpoint=] [--access-token=] [--discover-orgs] [--org=]* [--usr=]*',
    function(
        OutputInterface $output,
        bool $discoverOrgs,
        string $endpoint = null,
        string $accessToken = null,
        array $org = [],
        array $usr = []
    ) {
        $github = new Github\Client(
            enterpriseUrl: $endpoint,
        );

        if (null !== $accessToken) {
            $github->authenticate($accessToken, null, Github\Client::AUTH_ACCESS_TOKEN);
        }

        $document = new DOMDocument();
        $document->formatOutput = true;
        $document->append(
            $root = $document->createElement('manifest'),
        );

        if ($discoverOrgs) {
            $paginator = new Github\ResultPager($github);
            $result = $paginator->fetchAll($github->organization(), 'all');
            $org = array_merge(
                array_map(static fn(array $data): string => $data['login'], $result),
                $org,
            );
        }

        foreach ($org as $orgName) {
            try {
                $organisation = $github->organization()->show($orgName);

                $paginator = new Github\ResultPager($github);
                $result = $paginator->fetchAll($github->organization(), 'repositories', [$orgName]);
                uasort($result, static function(array $project1, array $project2): int {
                    return strtolower($project1['name']) <=> strtolower($project2['name']);
                });
            } catch (\Throwable $e) {
                $output->writeln("<error>Error retrieving org = $orgName: {$e->getMessage()}</error>");

                continue;
            }

            $root->append($document->createComment(" org: $orgName "));

            $remote = $document->createElement('remote');
            $remote->setAttribute('name', "github-$orgName");
            $remote->setAttribute('fetch', str_replace("/{$result[0]['name']}.git", '', $result[0]['ssh_url']));
            $root->append($remote);

            foreach ($result as $project) {
                $el = $document->createElement('project');
                $el->setAttribute('name', "{$project['name']}.git");
                $el->setAttribute('remote', "github-$orgName");
                $el->setAttribute('revision', $project['default_branch']);
                $el->setAttribute('path', $project['name']);
                $root->append($el);
            }
        }

        foreach ($usr as $username) {
            try {
                $user = $github->user()->show($username);

                $paginator = new Github\ResultPager($github);
                $result = $paginator->fetchAll($github->user(), 'repositories', [$username]);
                uasort($result, static function(array $project1, array $project2): int {
                    return strtolower($project1['name']) <=> strtolower($project2['name']);
                });
            } catch (\Throwable $e) {
                $output->writeln("<error>Error retrieving usr = $username: {$e->getMessage()}</error>");

                continue;
            }

            $root->append($document->createComment(" usr: $username "));

            $remote = $document->createElement('remote');
            $remote->setAttribute('name', "github-$username");
            $remote->setAttribute('fetch', str_replace("/{$result[0]['name']}.git", '', $result[0]['ssh_url']));
            $root->append($remote);

            foreach ($result as $project) {
                $el = $document->createElement('project');
                $el->setAttribute('name', "{$project['name']}.git");
                $el->setAttribute('remote', "github-$username");
                $el->setAttribute('revision', $project['default_branch']);
                $el->setAttribute('path', $project['name']);
                $root->append($el);
            }
        }

        echo $document->saveXML(), PHP_EOL;
    }
);

$app->run();
